spec:
  templates:
  - name: optimize-variational-circuit
    parent: generic-task
    inputs:
      parameters:
      - name: ansatz-specs
      - name: backend-specs
      - name: optimizer-specs
      - name: cost-function-specs
      - name: command
        value: bash main_script.sh
      artifacts:
      - name: initial-parameters
        path: /app/initial_parameters.json
      - name: qubit-operator
        path: /app/qubitop.json
      - name: fixed-parameters
        path: /app/fixed_parameters.json
        optional: True
      - name: noise-model
        path: /app/noise_model.json
        optional: True
      - name: device-connectivity
        path: /app/device_connectivity.json
        optional: True
      - name: parameter-grid
        path: /app/parameter_grid.json
        optional: True
      - name: constraint-operator
        path: /app/constraint_operator.json
        optional: True
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            qvm -S &
            quilc -S &
            source /app/usr/local/bin/compilers_and_libraries.sh
            python3 python_script.py
      - name: python-script
        path: /app/python_script.py
        raw:
          data: |
            import os
            from zquantum.core.serialization import save_optimization_results
            from zquantum.core.circuit import load_circuit_template_params, save_circuit_template_params, load_parameter_grid, load_circuit_connectivity
            from qeopenfermion import load_qubit_operator
            from zquantum.core.utils import create_object, load_noise_model
            import json

            if os.path.isfile('initial_parameters.json'):
              initial_parameters = load_circuit_template_params('initial_parameters.json')
            else:
              initial_parameters = None

            if os.path.isfile('fixed_parameters.json'):
              fixed_parameters = load_circuit_template_params('fixed_parameters.json')
            else:
              fixed_parameters = None

            # Load qubit op
            operator = load_qubit_operator('qubitop.json')

            ansatz_specs = {{inputs.parameters.ansatz-specs}}
            if ansatz_specs['function_name'] == 'QAOAFarhiAnsatz':
              ansatz = create_object(ansatz_specs, cost_hamiltonian=operator)
            else:
              ansatz = create_object(ansatz_specs)

            # Load parameter grid
            if os.path.isfile('parameter_grid.json'):
              grid = load_parameter_grid('parameter_grid.json')
            else:
              grid = None
            optimizer_specs = {{inputs.parameters.optimizer-specs}}
            if grid is not None and optimizer_specs['function_name'] == 'GridSearchOptimizer':
              optimizer = create_object(optimizer_specs, grid=grid)
            else:
              optimizer = create_object(optimizer_specs)

            backend_specs = {{inputs.parameters.backend-specs}}
            if os.path.isfile('noise_model.json'):
              backend_specs["noise_model"] = load_noise_model("noise_model.json")
            if os.path.isfile("device_connectivity.json"):
                backend_specs["device_connectivity"] = load_circuit_connectivity(
                    "device_connectivity.json"
                )
            backend = create_object(backend_specs)

            cost_function_specs = {{inputs.parameters.cost-function-specs}}
            estimator_specs = cost_function_specs.pop("estimator-specs", None)
            if estimator_specs is not None:
              cost_function_specs["estimator"] = create_object(estimator_specs)
            cost_function_specs["target_operator"] = operator
            cost_function_specs["ansatz"] = ansatz
            cost_function_specs["backend"] = backend
            cost_function_specs["fixed_parameters"] = fixed_parameters
            cost_function = create_object(cost_function_specs)
            if os.path.isfile("constraint_operator.json"):
              constraint_operator = load_qubit_operator("constraint_operator.json")
              constraints_cost_function_specs = {{inputs.parameters.cost-function-specs}}
              constraints_estimator_specs = constraints_cost_function_specs.pop("estimator-specs", None)
              if constraints_estimator_specs is not None:
                constraints_cost_function_specs["estimator"] = create_object(constraints_estimator_specs)
              constraints_cost_function_specs["ansatz"] = ansatz
              constraints_cost_function_specs["backend"] = backend
              constraints_cost_function_specs["target_operator"] = constraint_operator
              constraint_cost_function = create_object(constraints_cost_function_specs)
              constraint_cost_function_wrapper = lambda params: constraint_cost_function.evaluate(params).value
              constraint_functions = (
                  {"type": "eq", "fun": constraint_cost_function_wrapper},
              )
              optimizer.constraints = constraint_functions

            opt_results = optimizer.minimize(cost_function, initial_parameters)

            save_optimization_results(opt_results, 'optimization-results.json')
            save_circuit_template_params(opt_results.opt_params, 'optimized_parameters.json')
    outputs:
      artifacts:
      - name: optimization-results
        path: /app/optimization-results.json
      - name: optimized-parameters
        path: /app/optimized_parameters.json


  # CMA-ES optimization returns `xbest`, the best solution evaluated, but one might want to have `xfavorite`, which is the current best estimate of the optimum
  - name: extract-xfavorite-parameters-from-cmaes-opt-results
    parent: generic-task
    inputs:
      parameters:
      - name: command
        value: python3 main_script.py
      artifacts:
      - name: optimization-results
        path: /app/optimization-results.json
      - name: main-script
        path: /app/main_script.py
        raw:
          data: |
            from zquantum.optimizers.utils import load_optimization_results
            from zquantum.core.circuit import save_circuit_template_params
            import numpy as np

            opt_results=load_optimization_results("optimization-results.json")

            save_circuit_template_params(np.array(opt_results.cma_xfavorite), "favorite_parameters.json")
    outputs:
      artifacts:
      - name: favorite-parameters
        path: /app/favorite_parameters.json
